<?php

/**
 * @file
 * Functions to support theming in the sub-theme of Adminimnal.
 */

use Drupal\Component\Utility\Xss;
use Drupal\Core\Form\FormStateInterface;
use Drupal\Core\Render\Element;
use Drupal\Component\Utility\Html;
use Drupal\Core\Template\Attribute;
use Drupal\file\Entity\File;
use Drupal\image\Entity\ImageStyle;

/**
 * Implements hook_preprocess_HOOK() for HTML document templates.
 */
function starterkit_preprocess_html(&$variables) {

  // Add adminimal class to the body.
  $variables['attributes']['class'][] = 'starterkit';

}

/**
 * Define the new template for the theme below
 *
 * @param $existing
 * @param $type
 * @param $theme
 * @param $path
 * @return array
 */
function starterkit_theme($existing, $type, $theme, $path) {
  $theme_path = \Drupal::theme()->getActiveTheme()->getPath();
  return array(
    'field_multiple_value_form_divs' => array(
      'template' => 'field-multiple-value-form-divs',
      'path' => $theme_path . '/templates/field',
      'theme path' => $theme_path,
      'render element' => 'element',
    ),
  );
}

/**
 * Implements hook_theme_suggestion_alter for field_multiple_value_form items to add the paragraphs suggestion when
 * the library is detected.
 * TODO: A better way to determine if this is a paragraphs field would be super
 *
 * @param array $suggestions
 * @param array $variables
 * @param $hook
 */
function starterkit_theme_suggestions_field_multiple_value_form_alter(array &$suggestions, array $variables, $hook) {
  if (isset($variables['element']['#attached']['library'])) {
    // Classic
    if ($is_paragraphs_widget = in_array('paragraphs/drupal.paragraphs.admin', $variables['element']['#attached']['library'])) {
      $suggestions[] = 'field_multiple_value_form_divs';
    }
    // Experimental
    // @TODO: Need to look more into how the new experimental widget is working, uncommenting the following
    // seems to make it generally work with some different styles, but will need to look into it
//    if ($is_paragraphs_widget = in_array('paragraphs/drupal.paragraphs.widget', $variables['element']['#attached']['library'])) {
//      $suggestions[] = 'field_multiple_value_form_divs';
//    }
  }
}

/**
 * Process fields that have been determined to be paragraphs fields
 *
 * @param $variables
 */
function starterkit_preprocess_field_multiple_value_form_divs(&$variables) {
  $element = $variables['element'];
  $variables['multiple'] = $element['#cardinality_multiple'];

  if ($variables['multiple']) {
    $table_id = Html::getUniqueId($element['#field_name'] . '_values');
    $order_class = $element['#field_name'] . '-delta-order';
    $header_attributes = new Attribute(array('class' => array('label', 'form-item__label')));
    if (!empty($element['#required'])) {
      $header_attributes['class'][] = 'js-form-required';
      $header_attributes['class'][] = 'form-required';
    }
    $header = array(
      array(
        '#prefix' => '<h3' . $header_attributes . '>',
        'title' => array(
          '#markup' => $element['#title'],
        ),
        '#suffix' => '</h3>',
      )
    );
    $rows = array();

    // Sort items according to '_weight' (needed when the form comes back after
    // preview or failed validation).
    $items = array();
    $variables['button'] = array();
    foreach (Element::children($element) as $key) {
      if ($key === 'add_more') {
        $variables['button'] = &$element[$key];
      }
      else {
        $items[] = &$element[$key];
      }
    }
    usort($items, '_field_multiple_value_form_sort_helper');

    // Add the items as table rows.
    foreach ($items as $item) {
      $item['_weight']['#attributes']['class'] = array($order_class);
      $item['_weight']['#attributes']['class'] = 'draggable';
    }


    $variables['paragraphs_field_header'] = $header;
    $variables['paragraphs_field_items'] = $items;

    $variables['table'] = array(
      '#type' => 'table',
      '#header' => $header,
      '#rows' => $rows,
      '#attributes' => array(
        'id' => $table_id,
        'class' => array('field-multiple-table'),
      ),
      '#tabledrag' => array(
        array(
          'action' => 'order',
          'relationship' => 'sibling',
          'group' => $order_class,
        ),
      ),
    );

    if (!empty($element['#description'])) {
      $description_id = $element['#attributes']['aria-describedby'];
      $description_attributes['id'] = $description_id;
      $variables['description']['attributes'] = new Attribute($description_attributes);
      $variables['description']['content'] = $element['#description'];

      // Add the description's id to the table aria attributes.
      $variables['table']['#attributes']['aria-describedby'] = $element['#attributes']['aria-describedby'];
    }
  }
  else {
    $variables['elements'] = array();
    foreach (Element::children($element) as $key) {
      $variables['elements'][] = $element[$key];
    }
  }
}
