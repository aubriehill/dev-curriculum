<?php

/**
 * Use this file to override Drupal's default HTML output
 *
 * 1. Preprocess hooks
 * 2. Theme suggestions
 * 3. Utility functions
 */

use Drupal\file\Entity\File;
use Drupal\image\Entity\ImageStyle;
use Drupal\block\Entity\Block;
use Drupal\views\Views;
use Drupal\Component\Utility\Html;
use Drupal\Core\Template\Attribute;
use Drupal\taxonomy\Entity\Term;
use Drupal\Core\Render\Element;

//*********************************************
// 1. Preprocess hooks
//*********************************************

/**
 * Implements template_preprocess_node().
 */
function themekit_preprocess_node(&$variables) {
  // Set our own node type preprocess, drupal creates them by default, but seems to only run hook_preprocess_node__event
  // on event full pages, not event teasers as well
  if (!empty($variables['node']) && is_object($variables['node']) && method_exists($variables['node'], 'getType')) {
    //ensure that the node variable exists and is an object
    $function = __FUNCTION__ . '_' . $variables['node']->getType();
    if (function_exists($function)) {
      $function($variables);
    }
  }
}


/**
 * Implements template_preprocess_page().
 */
function themekit_preprocess_page(&$variables) {
}

/**
 * Implements template_preprocess_field().
 */
function themekit_preprocess_field(&$variables) {

}

/**
 * Implements template_preprocess_node_article().
 */
function themekit_preprocess_node_article(&$variables) {
}

/**
 * Implements template_preprocess_block().
 * For General block
 */
function themekit_preprocess_block(&$variables) {
  // Set our own content blocks type preprocess and grab block bundle for theming purposes.
  if (!empty($variables['elements']['content']['#block_content'])) {
    $function = __FUNCTION__ . '_' . $variables['elements']['content']['#block_content']->bundle();
    if (function_exists($function)) {
      $function($variables);
    }
    $variables['block_type'] = $variables['elements']['content']['#block_content']->bundle();
  }
}

/**
 * Paragraphs preprocess.
 */
function themekit_preprocess_paragraph(&$variables) {
  // Set our own paragraphs type preprocess, drupal creates them by default, but they seem
  // to only run hook_preprocess_paragraph__simple_content on default view mode,
  // not additional view modes as well
  if (!empty($variables['paragraph']) && is_object($variables['paragraph']) && method_exists($variables['paragraph'], 'getType')) {
    //ensure that the node variable exists and is an object
    $function = __FUNCTION__ . '_' . $variables['paragraph']->getType();
    if (function_exists($function)) {
      $function($variables);
    }
  }
}

/** Simple */
function themekit_preprocess_paragraph_simple_content(&$variables) {
  // Example hook for paragraph type
}

/** Link */
function themekit_preprocess_paragraph_link_file(&$variables) {
  /* @var $paragraph Drupal\paragraphs\Entity\Paragraph */
  $paragraph = $variables['paragraph'];

  // If alt link text has content, set to description to that value and create a new cache tag
  if (!$paragraph->field_alt_link_text->isEmpty()) {
    $file = $paragraph->field_file->entity->field_file->entity;

    if ($file) {
      $variables['alternate_file'] = [
        '#theme' => 'file_link',
        '#file' => $file,
        '#description' => $paragraph->field_alt_link_text->value
      ];
    }
  }
}

/**
 * Paragraphs preprocess media image.
 *
 * @param array $variables
 *   Default preprocess variables.
 */
function themekit_preprocess_paragraph_media_image(array &$variables) {
  /* @var $paragraph Drupal\paragraphs\Entity\Paragraph */
  $paragraph = $variables['paragraph'];

  if (!empty($paragraph->field_image->entity)) {
    $uri = $paragraph->field_image->entity->field_media_image->entity->getFileUri();
    $alt = $paragraph->field_image->entity->field_media_image->first()->get('alt')->getString();
    $responsive_image_style = '';

    // Do contextual adjustments to responsive image (image style or background
    // Identify the implementing bundle and use any additional conditions as well
    $parent = $paragraph->getParentEntity();
    if ($parent->getEntityTypeId() === 'paragraph') {
      switch ($parent->getType()) {
//      TODO: examples to demonstrate implementing responsive image style and background image overrides on media_image, remove if not using
//        case 'compound_media_bar':
//          $responsive_image_style = 'full_width';
//          break;
      }
    }

    // Only set custom image style for items that have set the responsive image style
    if ($responsive_image_style) {
      $variables['custom_image_style'] = [
        '#theme' => 'responsive_image',
        '#responsive_image_style_id' => $responsive_image_style,
        '#uri' => $uri,
        '#attributes' => [
          'alt' => $alt,
        ],
      ];
    }
  }
}

/** Compound */
// TODO: Delete this preprocess and the corresponding template/styles if you are deleting all of the starter paragraphs
function themekit_preprocess_paragraph_compound_media_bar(&$variables) {
  /* @var $paragraph Drupal\paragraphs\Entity\Paragraph */
  $paragraph = $variables['paragraph'];

  // Get settings
  $variables['media_order'] = $paragraph->field_media_order->value;
  $variables['media_position'] = $paragraph->field_media_position->value;
}


//*********************************************
// 2. Theme suggestions
//*********************************************

/**
 * Implements template_theme_suggestions_HOOK_alter().
 */
function themekit_theme_suggestions_field_alter(array &$suggestions, array $variables) {
  $field_name = !empty($variables['element']['#field_name']) ? $variables['element']['#field_name'] : '';
  $type = !empty($variables['element']['#entity_type']) ? $variables['element']['#entity_type'] : '';
  $bundle = !empty($variables['element']['#bundle']) ? $variables['element']['#bundle'] : '';
  $is_paragraph = ($type == 'paragraph');

  // Apply theme suggestions based on field name.
  switch($field_name) {
    case 'field_p_content':
    case 'field_p_header':
      // Remove all field markup so only the field value markup is output.
      array_unshift($suggestions, 'field__no_wrapper');
      break;
    case 'field_p_column':
      // Remove field item wrappers.
      array_unshift($suggestions, 'field__reset');
      break;
  }

  // Apply theme suggestions for "field_heading" based on paragraph bundle.
  if ($field_name == 'field_heading' && $is_paragraph) {
    switch($bundle) {
      case 'banner_standard':
      case 'single_heading':
        array_unshift($suggestions, 'field__heading_3');
        break;
    }
  }

  switch ($type) {
    case 'contact_message':
      $suggestions[] = 'field__' . $type;
      $suggestions[] = 'field__' . $type . '__' . $variables['element']['#field_type'];
      break;
  }
}

/**
 * Implements template_theme_suggestions_HOOK_alter().
 */
function themekit_theme_suggestions_block_alter(array &$suggestions, array $variables) {
  // Block suggestions for custom block bundles.
  if (isset($variables['elements']['content']['#block_content'])) {
    array_splice($suggestions, 1, 0, 'block__bundle__' . $variables['elements']['content']['#block_content']->bundle());
  }
}

/**
 * Implements template_theme_suggestions_HOOK_alter().
 */
function themekit_theme_suggestions_form_alter(array &$suggestions, array $variables) {
  $suggestions[] = 'form__' . $variables['element']['#form_id'];
}

//*********************************************
// 3. Utility functions
//*********************************************

/**
 * Get a renderable array from a block ID
 *
 * @param $block_id
 * @param null $weight
 *  Optional weight parameter, useful if you are dumping this into a region and need to negotiate its position
 * @return array
 */
function themekit_block_to_renderable_array($block_id, $weight = null) {
  $block = Block::load($block_id);
  if (is_null($block)) return [];
  $block_content = \Drupal::entityTypeManager()
    ->getViewBuilder('block')
    ->view($block);

  // set weight
  if (isset($weight)) {
    $block_content['#weight'] = $weight;
  }

  if ($block->access('view')) {
    return $block_content;
  }
}


/*
 * Layout Builder Admin / Move Admin theming here
 *
 *
 *
 */

/**
 * Define the new template for the theme below
 * @TODO move to module
 *
 * @param $existing
 * @param $type
 * @param $theme
 * @param $path
 * @return array
 */
function themekit_theme($existing, $type, $theme, $path) {
  $theme_path = \Drupal::theme()->getActiveTheme()->getPath();
  return array(
    'field_multiple_value_form_divs' => array(
      'template' => 'field-multiple-value-form-divs',
      'path' => $theme_path . '/global/templates/layout-builder-admin',
      'theme path' => $theme_path,
      'render element' => 'element',
    ),
  );
}

/**
 * Implements hook_theme_suggestion_alter for field_multiple_value_form items to add the paragraphs suggestion when
 * the library is detected.
 * TODO: A better way to determine if this is a paragraphs field would be super
 * @TODO move to module
 *
 * @param array $suggestions
 * @param array $variables
 * @param $hook
 */
function themekit_theme_suggestions_field_multiple_value_form_alter(array &$suggestions, array $variables, $hook) {
  if (isset($variables['element']['#attached']['library'])) {
    // Classic
    if ($is_paragraphs_widget = in_array('paragraphs/drupal.paragraphs.admin', $variables['element']['#attached']['library'])) {
      $suggestions[] = 'field_multiple_value_form_divs';
    }
    // Experimental
    // @TODO: Need to look more into how the new experimental widget is working, uncommenting the following
    // seems to make it generally work with some different styles, but will need to look into it
    //    if ($is_paragraphs_widget = in_array('paragraphs/drupal.paragraphs.widget', $variables['element']['#attached']['library'])) {
    //      $suggestions[] = 'field_multiple_value_form_divs';
    //    }
  }
}

/**
 * Process fields that have been determined to be paragraphs fields
 * @TODO move to module
 *
 * @param $variables
 */
function themekit_preprocess_field_multiple_value_form_divs(&$variables) {
  $element = $variables['element'];
  $variables['multiple'] = $element['#cardinality_multiple'];

  if ($variables['multiple']) {
    $table_id = Html::getUniqueId($element['#field_name'] . '_values');
    $order_class = $element['#field_name'] . '-delta-order';
    $header_attributes = new Attribute(array('class' => array('label')));
    if (!empty($element['#required'])) {
      $header_attributes['class'][] = 'js-form-required';
      $header_attributes['class'][] = 'form-required';
    }
    $header = array(
      array(
        '#prefix' => '<h4' . $header_attributes . '>',
        'title' => array(
          '#markup' => $element['#title'],
        ),
        '#suffix' => '</h4>',
      )
    );
    $rows = array();

    // Sort items according to '_weight' (needed when the form comes back after
    // preview or failed validation).
    $items = array();
    $variables['button'] = array();
    foreach (Element::children($element) as $key) {
      if ($key === 'add_more') {
        $variables['button'] = &$element[$key];
      }
      else {
        $items[] = &$element[$key];
      }
    }
    usort($items, '_field_multiple_value_form_sort_helper');

    // Add the items as table rows.
    foreach ($items as $item) {
      $item['_weight']['#attributes']['class'] = array($order_class);
      $item['_weight']['#attributes']['class'] = 'draggable';
    }


    $variables['paragraphs_field_header'] = $header;
    $variables['paragraphs_field_items'] = $items;

    $variables['table'] = array(
      '#type' => 'table',
      '#header' => $header,
      '#rows' => $rows,
      '#attributes' => array(
        'id' => $table_id,
        'class' => array('field-multiple-table'),
      ),
      '#tabledrag' => array(
        array(
          'action' => 'order',
          'relationship' => 'sibling',
          'group' => $order_class,
        ),
      ),
    );

    if (!empty($element['#description'])) {
      $description_id = $element['#attributes']['aria-describedby'];
      $description_attributes['id'] = $description_id;
      $variables['description']['attributes'] = new Attribute($description_attributes);
      $variables['description']['content'] = $element['#description'];

      // Add the description's id to the table aria attributes.
      $variables['table']['#attributes']['aria-describedby'] = $element['#attributes']['aria-describedby'];
    }
  }
  else {
    $variables['elements'] = array();
    foreach (Element::children($element) as $key) {
      $variables['elements'][] = $element[$key];
    }
  }
}
